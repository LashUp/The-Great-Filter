List<IMyTerminalBlock> list = new List<IMyTerminalBlock>();
    
public bool GetEnemies(out List<MyDetectedEntityInfo> enemyList)
{
	enemyList = Me.GetValue<Func<double,List<MyDetectedEntityInfo>>>("GetEnemies")(5000);
	return enemyList.Count != 0 || enemyList != null;
}
public Vector3D TrackEntityById(long entityId)
{
	return Me.GetValue<Func<long,Vector3D>>("TrackEntityById")(entityId);
}
bool receivedBroadcast = false;
bool success = false;
bool combatZero = false;
bool SAR = false;
float tango = 0;
float tangoPOS = 15;
float ping = 0;
float signalTimer = 0;
long entityId = 0;
MyDetectedEntityInfo EnemyS;
List<MyDetectedEntityInfo> targets;
readonly Random rnd = new Random();
readonly Random rndDistance = new Random();
readonly Random diceRoll = new Random();
Vector3D TargetV3D = new Vector3D(0, 0, 0);
string OUT = "";
string TGT = "";
string KEY = "";
string Key = "";
string Protocol = "";
string KeyStore = "";
		
public void Main(string argument) 
	{ 
	string Ping = ping.ToString("G");
	ping++;
	Echo("Last Ping " + Ping);
	Echo("Protocol: " + Protocol);
	if (success)
		{
			Echo("Signal Established");
		}
	if (!success && ping > 17)
		{
			if (Key != "")
				{
					KeyStore = Key;
					Key = "";
					KEY = "";
					Storage = "";
				}
			else
				{
					string[] DATA = Storage.Split('*');
					if (DATA.Length > 1)
						{
							Key = DATA[1];
							KeyStore = Key;
							Key = "";
							KEY = "";
							Storage = "";
						}
				}
		}

	if (argument.Contains("CKR2C") == true && argument.Contains("*5503") == true)
		{
			string[] INFO = argument.Split('*');
			if (INFO.Length > 1 && signalTimer <= 1)
				{
					Vector3D.TryParse(INFO[0], out TargetV3D);
					if (KEY == "" || KEY == INFO[1] || KeyStore == INFO[1])
						{
							Key = INFO[1];
							KEY = Key;
							TGT = TargetV3D.ToString();
							OUT = string.Join("*", TGT ?? "", KEY, KeyStore);
							Storage = OUT;
							receivedBroadcast = true;
							ping = 0;
							Protocol = "5503";
						}
				}
		}

	if (argument.Contains("CKR2C") == true && argument.Contains("*5521") == true)
		{
			string[] INFO = argument.Split('*');
			if (INFO.Length > 1 && signalTimer <= 1)
				{
					Vector3D.TryParse(INFO[0], out TargetV3D);
					if (KEY == "" || KEY == INFO[1] || KeyStore == INFO[1])
						{
							Key = INFO[1];
							KEY = Key;
							TGT = TargetV3D.ToString();
							OUT = string.Join("*", TGT ?? "", KEY, KeyStore);
							Storage = OUT;
							receivedBroadcast = true;
							ping = 0;
							Protocol = "5521";
						}
				}			
		}

	if (argument.Contains("CKR2C") == true && argument.Contains("*2196") == true)
		{
			string[] INFO = argument.Split('*');
			if (INFO.Length > 1)
				{
					if (KEY == INFO[1] || KeyStore == INFO[1])
						{
							OUT = string.Join("*", TGT ?? "", KEY, KeyStore);
							receivedBroadcast = true;
							ping = 0;
							Protocol = "ERROR";
							List<IMyBatteryBlock> Batteries = new List<IMyBatteryBlock>();
							List<IMyReactor> Reactors = new List<IMyReactor>();
							GridTerminalSystem.GetBlocksOfType<IMyBatteryBlock>(Batteries);
							GridTerminalSystem.GetBlocksOfType<IMyReactor>(Reactors);
								foreach (var item in Batteries)
									{
										int disableChance = diceRoll.Next(0, 6);
										if (disableChance > 5)
											{
												IMyBatteryBlock Battery = (item as IMyBatteryBlock);
												Battery.ApplyAction("OnOff_Off");
											}
									}
								foreach (var item in Reactors)
									{
										int disableChance = diceRoll.Next(0, 6);
										if (disableChance > 3)
											{
												IMyReactor Reactor = (item as IMyReactor);
												Reactor.ApplyAction("OnOff_Off");
											}
									}
						}
				}			
		}

	if (argument.Contains("CKR2C") == true && argument.Contains("*2197") == true)
		{
			combatZero = true;
			receivedBroadcast = true;
			ping = 0;
			Protocol = "2197";
			List<IMyBatteryBlock> Batteries = new List<IMyBatteryBlock>();
			List<IMyReactor> Reactors = new List<IMyReactor>();
			GridTerminalSystem.GetBlocksOfType<IMyBatteryBlock>(Batteries);
			GridTerminalSystem.GetBlocksOfType<IMyReactor>(Reactors);
				foreach (var item in Batteries)
					{
						IMyBatteryBlock Battery = (item as IMyBatteryBlock);
						Battery.ApplyAction("OnOff_On");
					}
				foreach (var item in Reactors)
					{
						IMyReactor Reactor = (item as IMyReactor);
						Reactor.ApplyAction("OnOff_On");
					}
		}

	if (combatZero)
		{
			KEY = "";
			Key = "";
			KeyStore = "";
		}
		
		if (receivedBroadcast && signalTimer <= 0)
			{
				signalTimer = 10;
				receivedBroadcast = false;
				if (TGT != "")
					{
						GridTerminalSystem.GetBlocksOfType<IMyRemoteControl>(list);
						if (list.Count > 0)
							{
								var remote = list[0] as IMyRemoteControl;
								remote.ClearWaypoints();
								int distanceModifier = rndDistance.Next(-2400, 2400);
								remote.AddWaypoint(TargetV3D + distanceModifier + remote.GetTotalGravity() * -2f, "Target");
								remote.SetAutoPilotEnabled(true);
								remote.ApplyAction("CollisionAvoidance_On");
								success = true;
							}
							
					}
			}
		else
			{
				signalTimer--;
			}
				
	//-------AUTONOMOUS LOGIC FOLLOWS--------//
	
		if (!receivedBroadcast && ping >= 15)
			{
				success = false;
				Protocol = "2198";
				if (SAR)
					{
						GridTerminalSystem.GetBlocksOfType<IMyRemoteControl>(list);
						if (list.Count > 0)
							{
								var remote = list[0] as IMyRemoteControl;
								string[] INFO = Storage.Split('*');
								if (INFO.Length > 1)
									{
										Vector3D.TryParse(INFO[4], out TargetV3D);
										remote.ClearWaypoints();
										int distanceModifier = rndDistance.Next(-300, 300);
										remote.AddWaypoint(TargetV3D + distanceModifier + remote.GetTotalGravity() * -2f, "Target");
										remote.ApplyAction("CollisionAvoidance_On");
										remote.SetAutoPilotEnabled(true);
									}
							}
					}
				if (tango == 0)
					{
						if(GetEnemies(out targets))
							{
								GridTerminalSystem.GetBlocksOfType<IMyRemoteControl>(list);
								if (list.Count > 0)
									{
										var remote = list[0] as IMyRemoteControl;
										int statusCheck = diceRoll.Next(0, 6);
										if (statusCheck <= 4)
											{
												if(targets.Count > 0)
													{
														int selection = rnd.Next(targets.Count);
														EnemyS = targets[selection];
														tango = (tango + 120);
														entityId = EnemyS.EntityId;
													}
												else if(targets.Count == 0)
													{
														tango = (tango + 50);
														var targetVector = Me.GetPosition();
														TGT = targetVector.ToString();
														OUT = string.Join("*", TGT ?? "", KEY, KeyStore);
														Storage = OUT;
														remote.ClearWaypoints();
														int distanceModifier = rndDistance.Next(-2400, 2400);
														remote.AddWaypoint(targetVector + distanceModifier, "Patrol");
														remote.ApplyAction("CollisionAvoidance_On");
														remote.SetAutoPilotEnabled(true);
													}
											}
										else if (statusCheck >= 5)
											{
												SAR = true;
												tango = (tango + 300);
											}
									}
							}
					}
				else
					{
						tango--;
						tangoPOS--;
						if (tangoPOS <= 0)
							{
								GridTerminalSystem.GetBlocksOfType<IMyRemoteControl>(list);
								var targetVector = TrackEntityById(entityId);
								TGT = targetVector.ToString();
								OUT = string.Join("*", TGT ?? "", KEY, KeyStore);
								Storage = OUT;
								tangoPOS = (tangoPOS + 10);
								if (list.Count > 0)
									{
										var remote = list[0] as IMyRemoteControl;
										GridTerminalSystem.GetBlocksOfType<IMyUserControllableGun>(list);     
										if (list.Count > 0)     
											{
												remote.ClearWaypoints();
												int distanceModifier = rndDistance.Next(-2400, 2400);
												remote.AddWaypoint(targetVector + distanceModifier + remote.GetTotalGravity() * -2f, "Target");
												remote.ApplyAction("CollisionAvoidance_On");
												remote.SetAutoPilotEnabled(true);
											}
										else
											{
												remote.ClearWaypoints();
												remote.AddWaypoint(targetVector - 1, "Target");
												remote.ApplyAction("CollisionAvoidance_Off");
												remote.SetAutoPilotEnabled(true);
											}
									}
							}
					}
			}
	}
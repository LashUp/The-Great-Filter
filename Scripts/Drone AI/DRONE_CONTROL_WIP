List<IMyTerminalBlock> list = new List<IMyTerminalBlock>();
    
public bool GetEnemies(out List<MyDetectedEntityInfo> enemyList)
{
	enemyList = Me.GetValue<Func<double,List<MyDetectedEntityInfo>>>("GetEnemies")(20000);
	return enemyList.Count != 0 || enemyList != null;
}
public Vector3D TrackEntityById(long entityId)
{
	return Me.GetValue<Func<long,Vector3D>>("TrackEntityById")(entityId);
}

float tango = 0;
float CEW = 0;
float ping = 0;
float Pursuit = 0;
float Retreat = 0;
long entityId = 0;
MyDetectedEntityInfo EnemyS;
List<MyDetectedEntityInfo> targets;
readonly Random rnd = new Random();
readonly Random KeyGen = new Random();
readonly Random rndDistance = new Random();
Vector3D TGT = new Vector3D(0, 0, 0);
Vector3D POS = new Vector3D(0, 0, 0);
Vector3D player = new Vector3D(0, 0, 0);
Vector3D origin = new Vector3D(0, 0, 0);
string Origin = "";
string lastPOS = "";
string TVECT = "";
string Key = "";
string KEY = "";
string OUT = "";
string Protocol = "";
bool Broadcast = false;

public void Main(string argument) 
	{
	
	if (argument.Contains("CKR2C") == true && argument.Contains("*2196") == true)
		{
			string[] INFO = argument.Split('*');
			
			if (INFO.Length > 1)
				{
					if (KEY == INFO[1])
						{
							CEW++;
							if (CEW > 30)
								{
									Protocol = "2197";
									CEW = 0;
								}
						}
				}			
		}
		
		if (this.Storage == null || this.Storage == "")
			{
				origin = Me.GetPosition();
				Origin = origin.ToString();
			}
		
		if (Key == "" || KEY == "" || Protocol == "2197")
			{
				if (KEY == "" && Key != "")
					{
						KEY = Key;
					}
				else if (Key == "" && KEY != "")
					{
						Key = KEY;
					}
				else
					{
						int KeyGen1 = KeyGen.Next(1001, 9999);
						int KeyGen2 = KeyGen.Next(1001, 9999);
						int KeyGen3 = KeyGen.Next(1001, 9999);
						int KeyGen4 = KeyGen.Next(1001, 9999);
						Key = KeyGen1 + ("-") + KeyGen2 + ("-") + KeyGen3 + ("-") + KeyGen4;
					}
			}

		if (Protocol == "2197" && CEW == 0)
			{
				List<IMyRadioAntenna> list = new List<IMyRadioAntenna>();
				GridTerminalSystem.GetBlocksOfType<IMyRadioAntenna>(list);
					foreach (var item in list)
						{
							IMyRadioAntenna CSant = (item as IMyRadioAntenna);
							CSant.ApplyAction("OnOff_On");
							Broadcast = true;
						}
			}

		if (Broadcast)
			{
				GridTerminalSystem.GetBlocksOfType<IMyRadioAntenna>(list);
				var POS = Me.GetPosition();
				lastPOS = POS.ToString();
				if (list.Count > 0)
					{
					OUT = string.Join("*", TVECT, Key, "\nCKR2C\n", Protocol, lastPOS, Origin);
					Storage = OUT;
					var ant = list[0] as IMyRadioAntenna;
					ant.SetValue("OnOff", true); 
					ant.TransmitMessage(OUT, MyTransmitTarget.Everyone);
					Broadcast = false;
					}
			}
		
		if (tango <= 0)
			{
				GridTerminalSystem.GetBlocksOfType<IMyRemoteControl>(list);
				var remote = list[0] as IMyRemoteControl;
				
				POS = remote.GetPosition();
				if(GetEnemies(out targets))
					{
						if(targets.Count > 0)
							{
								int selection = rnd.Next(targets.Count);
								EnemyS = targets[selection];
								entityId = EnemyS.EntityId;
								var targetVector = TrackEntityById(entityId);
								TVECT = targetVector.ToString();
								Protocol = "5503";
								Broadcast = true;
									if (Vector3D.DistanceSquared(targetVector, POS) > 12000 * 12000)
										{
											tango = (tango + 30);
										}
									else
										{
											tango = (tango + 300);
										}
							}
						else if(targets.Count == 0)
							{
								string[] INFO = Storage.Split('*');
								if (INFO.Length > 1)
									{
										Vector3D.TryParse(INFO[5], out origin);
										tango = (tango + 20);
										var POS = remote.GetPosition();
										lastPOS = POS.ToString();
										Broadcast = true;
										remote.ClearWaypoints();
										int distanceModifier = rndDistance.Next(-1200, 1200);
										remote.AddWaypoint(origin + distanceModifier, "Returning");
										remote.ApplyAction("CollisionAvoidance_On");
										remote.SetAutoPilotEnabled(true);
									}
							}
					}
			}
		else
			{
				tango--;
				ping--;
				Pursuit--;
				Retreat--;
				Echo("Target Engaged: Ping = " + ping);
			}
			
		if (Protocol == "5503" && Pursuit <= 0)
			{
				string[] INFO = Storage.Split('*');
				GridTerminalSystem.GetBlocksOfType<IMyRemoteControl>(list);
				var remote = list[0] as IMyRemoteControl;
				Vector3D TV3D = new Vector3D(0, 0, 0);
				if (INFO.Length > 1)
					{
						Vector3D.TryParse(INFO[0], out TV3D);
						if (list.Count > 0)
							{
								int distanceModifier = rndDistance.Next(600, 2400);
								TV3D = (TV3D + distanceModifier);
								Vector3D gv = new Vector3D(0, 0, 0);
								gv = (remote.GetTotalGravity() * -2f);
								remote.ClearWaypoints();
								remote.AddWaypoint(TV3D + gv, "5503");
								remote.SetAutoPilotEnabled(true);
								remote.ApplyAction("Backward");
								remote.ApplyAction("CollisionAvoidance_On");
								Pursuit = (Pursuit + 15);
								POS = remote.GetPosition();
								bool alert = remote.GetNearestPlayer(out player);
								if (alert)
									{
										if (Vector3D.DistanceSquared(player, POS) < 1000 * 1000)
											{
												Protocol = "5521";
											}
									}
							}
					}
			}
			
		if (Protocol == "5521" && Retreat <= 0)
			{
				GridTerminalSystem.GetBlocksOfType<IMyRemoteControl>(list);
				var remote = list[0] as IMyRemoteControl;
				POS = remote.GetPosition();
				remote.GetNearestPlayer(out player);
				if (Vector3D.DistanceSquared(player, POS) < 1000 * 1000)
					{
						var targetVector = POS;
						TVECT = targetVector.ToString();	
						Broadcast = true; 
						POS = ((POS + POS - player) - 3000f);
						Vector3D gv = new Vector3D(0, 0, 0);
						gv = (remote.GetTotalGravity() * -2f);
						remote.ClearWaypoints();
						remote.AddWaypoint(POS + gv, "5521"); 
						remote.SetAutoPilotEnabled(true);
						remote.ApplyAction("Forward");
						remote.ApplyAction("CollisionAvoidance_On");
						Retreat = (Retreat + 10);
					}
			}

		if (ping == 0)
			{
				ping = 10;
				var targetVector = TrackEntityById(entityId);
				TVECT = targetVector.ToString();
				Broadcast = true;
			} 
	}
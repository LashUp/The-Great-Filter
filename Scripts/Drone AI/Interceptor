        //Interceptor Drone Script

        //Configuration Values

        string scriptUpdateName = "StarWarsArenaScript-RebelFighter";

        bool useDroneSleepMode = false;
        bool useDroneDespawn = true;
        double sleepDistance = 20000;
        double despawnDistance = 20000;

        double remainDistance = 8000;

        double targetBreakawayDistance = 300;
        int targetBreakAwayCancelTimerTrigger = 10;

        int targetTrackingLimit = 30; //How long a drone will pursue a target before refreshing.

        string preferredRemoteControl = "Remote Control";

        ////////////////////////////////////////
        //======DO NOT EDIT BELOW HERE==========
        ////////////////////////////////////////

        //Block Individuals and Lists
        IMyRemoteControl remoteControl;
        List<IMyGyro> gyroList = new List<IMyGyro>();
        List<IMyThrust> thrustList = new List<IMyThrust>();
        List<IMyUserControllableGun> weaponList = new List<IMyUserControllableGun>();
        List<IMyCameraBlock> forwardCameraList = new List<IMyCameraBlock>();
        bool weaponsFiring = false;

        //Locations
        Vector3D dronePosition = new Vector3D(0, 0, 0);
        Vector3D closestPlayer = new Vector3D(0, 0, 0);
        Vector3D originPosition = new Vector3D(0, 0, 0);

        //Distances
        double distanceDroneToPlayer = 0;
        double distanceDroneToOrigin = 0;

        //Velocity Info

        //Planetary Data
        bool inNaturalGravity = false;
        double distanceSealevel = 0;
        double distanceSurface = 0;
        Vector3D planetPosition = new Vector3D(0, 0, 0);

        //Custom Targeting
        long EntityId = 0;
        List<long> targets = new List<long>();
        Vector3D targetPosition = new Vector3D(0, 0, 0);

        //RotationMode / AttackMode
        bool rotationModeActivated = false;
        Vector3D rotationTarget = new Vector3D(0, 0, 0);
        Vector3D breakawayPosition = new Vector3D(0, 0, 0);
        double minGRotation = 0.025;
        double maxGRotation = 0.6;
        int breakawayTimer = 0;

        //Misc
        bool scriptInit = false;
        bool scriptInitFailed = false;
        string lastChatSent = "Default";
        int tickCounter = -180;
        int tickIncrement = 10;
        int iceRefillTimer = 0;
        string currentMode = "GetTargets";
        int targetTracking = 0;
        Random rnd = new Random();

        public Program()
        {

            Runtime.UpdateFrequency = UpdateFrequency.Update10;

        }

        void DroneBehavior(string argument)
        {

            minGRotation = 0.025;
            maxGRotation = 0.5;

            if (distanceDroneToOrigin > remainDistance && currentMode != "Retreat")
            {

                currentMode = "ReturnToArea";

            }

            if (weaponsFiring == true)
            {

                weaponsFiring = false;
                WeaponFireMode(false, Vector3D.Zero, weaponList);

            }

            if (currentMode == "GetTargets")
            {
                targets = GetAllEnemyGrids();

                for (int i = targets.Count - 1; i >= 0; i--)
                {

                    if (TargetPowered(targets[i]) == false || TargetIsBroadcasting(targets[i]) == false)
                    {

                        targets.RemoveAt(i);
                        continue;

                    }

                }

                if (targets.Count > 0)
                {

                    EntityId = targets[rnd.Next(0, targets.Count)];
                    currentMode = "PursueTarget";

                }
                else
                {

                    currentMode = "Retreat";

                }

            }

            if (currentMode == "PursueTarget")
            {

                targetTracking++;
                targetPosition = GetTrackedEntityPosition(EntityId);

                if (targetPosition != new Vector3D(0, 0, 0) && TargetIsBroadcasting(EntityId) == true && targetTracking < targetTrackingLimit)
                {

                    if (ApproximateTarget(targetPosition, dronePosition, remoteControl.WorldMatrix.Forward, 7, 1200) == true)
                    {

                        weaponsFiring = true;
                        WeaponFireMode(true, Vector3D.Zero, weaponList);

                    }

                    if (Vector3D.Distance(dronePosition, targetPosition) < targetBreakawayDistance)
                    {

                        breakawayTimer = 0;
                        targetTracking = 0;
                        currentMode = "BreakAway";

                    }

                }
                else
                {

                    targetTracking = 0;
                    currentMode = "GetTargets";

                }

                if (inNaturalGravity == true && distanceSurface < 300)
                {

                    breakawayTimer = 0;
                    targetTracking = 0;
                    currentMode = "BreakAway";

                }

            }

            if (currentMode == "BreakAway")
            {

                //minGRotation = 0.2;
                //maxGRotation = 1;

                breakawayTimer++;

                targetPosition = GetTrackedEntityPosition(EntityId);

                if (inNaturalGravity == false)
                {

                    var breakAwayCoords = CreateDirectionAndTarget(targetPosition, dronePosition, dronePosition, 1000);
                    targetPosition = breakAwayCoords;

                }
                else
                {

                    var upDir = Vector3D.Normalize(dronePosition - planetPosition);
                    var forwardDir = Vector3D.CalculatePerpendicularVector(upDir);
                    var breakawayMatrix = MatrixD.CreateWorld(dronePosition, forwardDir, upDir);
                    var offset = Vector3D.Zero;
                    offset.X = (double)rnd.Next(-500, 500);
                    offset.Y = 1000;
                    offset.Z = (double)rnd.Next(-500, 500);
                    targetPosition = Vector3D.Transform(offset, breakawayMatrix);

                }

                if (targetPosition == Vector3D.Zero || breakawayTimer >= targetBreakAwayCancelTimerTrigger)
                {

                    targetTracking = 0;
                    currentMode = "GetTargets";

                }

            }

            if (currentMode == "ReturnToArea")
            {

                targetPosition = originPosition;

                if (distanceDroneToOrigin > remainDistance)
                {

                    targetTracking = 0;
                    currentMode = "GetTargets";

                }

            }

            if (currentMode == "Retreat")
            {

                if (inNaturalGravity == false)
                {

                    targetPosition = CreateDirectionAndTarget(closestPlayer, dronePosition, dronePosition, 4000);

                }
                else
                {

                    targetPosition = CreateDirectionAndTarget(planetPosition, dronePosition, dronePosition, 4000);

                }

                if (distanceDroneToOrigin > 4000)
                {

                    AttemptDespawn();

                }

            }

            rotationTarget = targetPosition;
            rotationModeActivated = true;

            Echo(targetPosition.ToString());
            Echo(rotationTarget.ToString());
            //TODO: Add Thrust Override Control Here

        }

        void Main(string argument)
        {

            if (scriptInit == false)
            {

                scriptInit = true;
                ScriptInitialized();

            }

            if (scriptInitFailed == true)
            {

                return;

            }

            if (closestPlayer != Vector3D.Zero)
            {

                SetRotationTowardsCoordinates(rotationModeActivated, remoteControl, rotationTarget, gyroList, minGRotation, 1, maxGRotation);
                OverrideThrust(true, remoteControl.WorldMatrix.Forward, 100, thrustList);

            }

            tickCounter += tickIncrement;

            if (tickCounter < 60)
            {

                return;

            }

            tickCounter = 0;

            closestPlayer = new Vector3D(0, 0, 0);

            if (remoteControl.GetNearestPlayer(out closestPlayer) == false)
            {

                return;

            }

            dronePosition = remoteControl.GetPosition();
            distanceDroneToPlayer = Vector3D.Distance(closestPlayer, remoteControl.GetPosition());

            if (useDroneDespawn == true && distanceDroneToPlayer > despawnDistance)
            {

                AttemptDespawn();

            }

            if (useDroneSleepMode == true && distanceDroneToPlayer > sleepDistance)
            {

                return;

            }

            if (remoteControl.TryGetPlanetPosition(out planetPosition) == true)
            {

                inNaturalGravity = true;
                var surface = remoteControl.TryGetPlanetElevation(MyPlanetElevation.Surface, out distanceSurface);
                var sealevel = remoteControl.TryGetPlanetElevation(MyPlanetElevation.Sealevel, out distanceSealevel);

            }

            distanceDroneToOrigin = Vector3D.Distance(originPosition, remoteControl.GetPosition());

            DroneBehavior(argument);

        }

        void ScriptInitialized()
        {

            //Check For Script Update
            var update = UpdateProgramBlockScript(scriptUpdateName);

			originPosition = me.GetPosition();

            //Get Remote
            if (preferredRemoteControl != "")
            {

                remoteControl = GridTerminalSystem.GetBlockWithName(preferredRemoteControl) as IMyRemoteControl;

            }

            if (remoteControl == null)
            {

                var remoteList = new List<IMyRemoteControl>();
                GridTerminalSystem.GetBlocksOfType<IMyRemoteControl>(remoteList);

                foreach (var remote in remoteList)
                {

                    if (remote.IsFunctional == true)
                    {

                        remoteControl = remote;
                        break;

                    }

                }

                if (remoteControl == null)
                {

                    scriptInitFailed = true;
                    return;

                }

            }

            //Get Forward Weapons
            weaponList.Clear();
            GridTerminalSystem.GetBlocksOfType<IMyUserControllableGun>(weaponList);

            //Get Forward Cameras
            GridTerminalSystem.GetBlocksOfType<IMyCameraBlock>(forwardCameraList);

            //Get Thrust
            GridTerminalSystem.GetBlocksOfType<IMyThrust>(thrustList);

            //Filter Out Non-Forward Cameras

            if (forwardCameraList.Count > 0)
            {

                for (int i = forwardCameraList.Count - 1; i >= 0; i--)
                {

                    if (forwardCameraList[i].WorldMatrix.Forward != remoteControl.WorldMatrix.Forward)
                    {

                        forwardCameraList.RemoveAt(i);

                    }

                }

            }

            //Get Gyros
            gyroList.Clear();
            GridTerminalSystem.GetBlocksOfType<IMyGyro>(gyroList);

        }

        bool ApproximateTarget(Vector3D targetCoords, Vector3D myShipPosition, Vector3D myShipForward, double maxAccuracyVariance, double maxTargetDistance = 850)
        {

            double distanceToTarget = Vector3D.Distance(targetCoords, myShipPosition);

            if (distanceToTarget > maxTargetDistance)
            {

                return false;

            }

            var impactPosition = distanceToTarget * myShipForward + myShipPosition;
            var accuracyDistance = Vector3D.Distance(impactPosition, targetCoords);

            if (accuracyDistance < maxAccuracyVariance)
            {

                return true;

            }

            return false;

        }

        Vector3D CreateDirectionAndTarget(Vector3D startDirCoords, Vector3D endDirCoords, Vector3D startPathCoords, double pathDistance)
        {

            var direction = Vector3D.Normalize(endDirCoords - startDirCoords);
            var coords = direction * pathDistance + startPathCoords;
            return coords;

        }

        void OverrideThrust(bool enableOverride, Vector3D direction, float thrustModifier, List<IMyThrust> thisThrustList, double currentSpeed = 100, double maximumSpeed = 110)
        {

            foreach (var thruster in thisThrustList)
            {

                if (thruster == null)
                {

                    continue;

                }

                if (thruster.IsFunctional == false)
                {

                    continue;

                }

                if (enableOverride == true && currentSpeed < maximumSpeed)
                {

                    if (thruster.WorldMatrix.Forward == direction * -1)
                    {

                        thruster.Enabled = true;
                        float maxthrust = thruster.MaxThrust;
                        thruster.ThrustOverridePercentage = thrustModifier;

                    }

                    if (thruster.WorldMatrix.Forward == direction)
                    {

                        thruster.Enabled = false;

                    }

                }
                else
                {

                    thruster.Enabled = true;
                    thruster.SetValueFloat("Override", 0);

                }

            }

        }

        void SetRotationTowardsCoordinates(bool enableRotation, IMyTerminalBlock referenceBlock, Vector3D targetCoords, List<IMyGyro> gyroRotateList, double minRotation = 0.1, double rotationAccuracy = 1, double rotationStrength = 1)
        {

            Vector3D gyroRotation = new Vector3D(0, 0, 0);
            double totalAxisDifference = 0;
            var refMatrix = referenceBlock.WorldMatrix;
            var pitchDirections = new Dictionary<Vector3D, Vector3D>();
            var yawDirections = new Dictionary<Vector3D, Vector3D>();

            if (enableRotation == true)
            {

                double maxRotation = 3.14;

                if (referenceBlock.CubeGrid.GridSizeEnum == MyCubeSize.Small)
                {

                    maxRotation *= 2;

                }

                var forwardDir = Vector3D.Normalize(targetCoords - referenceBlock.GetPosition()); //Direction To The Target
                var targetCheck = forwardDir * 100 + Vector3D.Zero;
                var realForwardCheck = Vector3D.Distance(targetCheck, referenceBlock.WorldMatrix.Forward * 100 + Vector3D.Zero);
                var upDistCheck = Vector3D.Distance(targetCheck, referenceBlock.WorldMatrix.Up * 100 + Vector3D.Zero);
                var downDistCheck = Vector3D.Distance(targetCheck, referenceBlock.WorldMatrix.Down * 100 + Vector3D.Zero);
                var leftDistCheck = Vector3D.Distance(targetCheck, referenceBlock.WorldMatrix.Left * 100 + Vector3D.Zero);
                var rightDistCheck = Vector3D.Distance(targetCheck, referenceBlock.WorldMatrix.Right * 100 + Vector3D.Zero);

                double pitchPowerModifier = 1;
                double pitchAxisDifference = 0;
                double yawPowerModifier = 1;
                double yawAxisDifference = 0;

                //Pitch
                if (upDistCheck < downDistCheck)
                {

                    gyroRotation.X = -1 * maxRotation;
                    pitchAxisDifference = downDistCheck - upDistCheck;

                }
                else
                {

                    gyroRotation.X = maxRotation;
                    pitchAxisDifference = upDistCheck - downDistCheck;

                }

                if (realForwardCheck < 142)
                {

                    pitchPowerModifier = pitchAxisDifference / 200;

                }
                else
                {

                    pitchAxisDifference = 100;

                }

                if (pitchPowerModifier < minRotation)
                {

                    pitchPowerModifier = minRotation;

                }

                //Yaw
                if (leftDistCheck < rightDistCheck)
                {

                    gyroRotation.Y = -1 * maxRotation;
                    yawAxisDifference = rightDistCheck - leftDistCheck;

                }
                else
                {

                    gyroRotation.Y = maxRotation;
                    yawAxisDifference = leftDistCheck - rightDistCheck;

                }

                if (realForwardCheck < 142)
                {

                    yawPowerModifier = yawAxisDifference / 200;

                }
                else
                {

                    yawAxisDifference = 100;

                }

                if (yawPowerModifier < minRotation && realForwardCheck < 142)
                {

                    yawPowerModifier = minRotation;

                }

                //Apply Rotation To Gyros

                if (pitchAxisDifference > rotationAccuracy)
                {

                    gyroRotation.X *= pitchPowerModifier;
                    gyroRotation.X *= rotationStrength;

                }
                else
                {

                    gyroRotation.X = 0;

                }

                if (yawAxisDifference > rotationAccuracy)
                {

                    gyroRotation.Y *= yawPowerModifier;
                    gyroRotation.Y *= rotationStrength;

                }
                else
                {

                    gyroRotation.Y = 0;

                }

                totalAxisDifference = yawAxisDifference + pitchAxisDifference;
                pitchDirections.Add(refMatrix.Forward, refMatrix.Up);
                pitchDirections.Add(refMatrix.Up, refMatrix.Backward);
                pitchDirections.Add(refMatrix.Backward, refMatrix.Down);
                pitchDirections.Add(refMatrix.Down, refMatrix.Forward);

                yawDirections.Add(refMatrix.Forward, refMatrix.Right);
                yawDirections.Add(refMatrix.Right, refMatrix.Backward);
                yawDirections.Add(refMatrix.Backward, refMatrix.Left);
                yawDirections.Add(refMatrix.Left, refMatrix.Forward);

            }

            var pitchDirectionsList = pitchDirections.Keys.ToList();
            var yawDirectionsList = yawDirections.Keys.ToList();

            foreach (var gyro in gyroRotateList)
            {

                if (gyro == null)
                {

                    continue;

                }

                if (gyro.IsWorking == false || gyro.IsFunctional == false || gyro.CubeGrid != referenceBlock.CubeGrid)
                {

                    continue;

                }

                if (enableRotation == false)
                {

                    gyro.GyroOverride = false;
                    continue;

                }

                if (totalAxisDifference < rotationAccuracy)
                {

                    gyro.Yaw = 0;
                    gyro.Pitch = 0;
                    gyro.Roll = 0;
                    continue;

                }

                var gyroMatrix = gyro.WorldMatrix;
                double[] localRotation = { 0, 0, 0 };
                int pitchIndex = 0;
                int yawIndex = 0;

                var localPitchDirections = new Dictionary<Vector3D, Vector3D>();
                var localYawDirections = new Dictionary<Vector3D, Vector3D>();
                var localRollDirections = new Dictionary<Vector3D, Vector3D>();

                var gyroPitchDirections = new Dictionary<Vector3D, Vector3D>();
                var gyroYawDirections = new Dictionary<Vector3D, Vector3D>();

                localPitchDirections.Add(gyroMatrix.Forward, gyroMatrix.Up);
                localPitchDirections.Add(gyroMatrix.Up, gyroMatrix.Backward);
                localPitchDirections.Add(gyroMatrix.Backward, gyroMatrix.Down);
                localPitchDirections.Add(gyroMatrix.Down, gyroMatrix.Forward);

                localYawDirections.Add(gyroMatrix.Forward, gyroMatrix.Right);
                localYawDirections.Add(gyroMatrix.Right, gyroMatrix.Backward);
                localYawDirections.Add(gyroMatrix.Backward, gyroMatrix.Left);
                localYawDirections.Add(gyroMatrix.Left, gyroMatrix.Forward);

                localRollDirections.Add(gyroMatrix.Up, gyroMatrix.Right);
                localRollDirections.Add(gyroMatrix.Right, gyroMatrix.Down);
                localRollDirections.Add(gyroMatrix.Down, gyroMatrix.Left);
                localRollDirections.Add(gyroMatrix.Left, gyroMatrix.Up);

                //Get Pitch Axis
                var checkPitchPitch = pitchDirectionsList.Except(localPitchDirections.Keys.ToList()).ToList();
                if (checkPitchPitch.Count == 0)
                {

                    pitchIndex = 0;
                    gyroPitchDirections = localPitchDirections;

                }

                var checkPitchYaw = pitchDirectionsList.Except(localYawDirections.Keys.ToList()).ToList();
                if (checkPitchYaw.Count == 0)
                {

                    pitchIndex = 1;
                    gyroPitchDirections = localYawDirections;

                }

                var checkPitchRoll = pitchDirectionsList.Except(localRollDirections.Keys.ToList()).ToList();
                if (checkPitchRoll.Count == 0)
                {

                    pitchIndex = 2;
                    gyroPitchDirections = localRollDirections;

                }

                //Get Yaw Axis
                var checkYawPitch = yawDirectionsList.Except(localPitchDirections.Keys.ToList()).ToList();
                if (checkYawPitch.Count == 0)
                {

                    yawIndex = 0;
                    gyroYawDirections = localPitchDirections;

                }

                var checkYawYaw = yawDirectionsList.Except(localYawDirections.Keys.ToList()).ToList();
                if (checkYawYaw.Count == 0)
                {

                    yawIndex = 1;
                    gyroYawDirections = localYawDirections;

                }

                var checkYawRoll = yawDirectionsList.Except(localRollDirections.Keys.ToList()).ToList();
                if (checkYawRoll.Count == 0)
                {

                    yawIndex = 2;
                    gyroYawDirections = localRollDirections;

                }

                //Assign Pitch
                if (pitchDirections[refMatrix.Forward] == gyroPitchDirections[refMatrix.Forward])
                {

                    localRotation[pitchIndex] = gyroRotation.X;

                }
                else
                {

                    localRotation[pitchIndex] = gyroRotation.X * -1;

                }

                if (pitchIndex == 1 || pitchIndex == 2)
                {

                    localRotation[pitchIndex] *= -1;

                }

                //Assign Yaw
                if (yawDirections[refMatrix.Forward] == gyroYawDirections[refMatrix.Forward])
                {

                    localRotation[yawIndex] = gyroRotation.Y;

                }
                else
                {

                    localRotation[yawIndex] = gyroRotation.Y * -1;

                }

                if (yawIndex == 0)
                {

                    localRotation[yawIndex] *= -1;

                }

                //Apply To Gyros
                gyro.Pitch = (float)localRotation[0];
                gyro.Yaw = (float)localRotation[1];
                gyro.Roll = (float)localRotation[2];
                gyro.GyroOverride = true;
                break;

            }

        }

        void WeaponFireMode(bool fireWeapons, Vector3D weaponDirection, List<IMyUserControllableGun> fixedWeaponList = null)
        {

            if (fixedWeaponList == null)
            {

                return;

            }

            foreach (var weapon in fixedWeaponList)
            {

                if (weapon == null)
                {

                    continue;

                }

                if (weapon as IMyLargeTurretBase != null)
                {

                    continue;

                }

                if (weapon.IsFunctional == false || weapon.IsWorking == false)
                {

                    continue;

                }

                if (weapon.WorldMatrix.Forward != weaponDirection && weaponDirection != Vector3D.Zero)
                {

                    continue;

                }

                if (fireWeapons == true)
                {

                    weapon.ApplyAction("Shoot_On");

                }
                else
                {

                    weapon.ApplyAction("Shoot_Off");

                }

            }

        }

        //Special Methods Using Custom PB Commands

        bool AttemptDespawn()
        {

            try
            {

                return Me.GetValue<bool>("NpcExtender-DespawnDrone");

            }
            catch (Exception exc)
            {

                return false;

            }

        }

        List<long> GetAllEnemyGrids(string specificFaction = "None", double distanceToCheck = 8000)
        {

            try
            {

                Me.CustomData = specificFaction + "\n" + distanceToCheck.ToString();
                return Me.GetValue<List<long>>("NpcExtender-GetAllEnemies");

            }
            catch (Exception exc)
            {

                Echo("NpcExtender-GetAllEnemy Hard Fail");
                return new List<long>();

            }

        }

        MyDetectedEntityInfo GetMDEI(long entityId)
        {

            try
            {

                Me.CustomData = entityId.ToString();
                return Me.GetValue<MyDetectedEntityInfo>("NpcExtender-GetDetectedEntityInfo");

            }
            catch (Exception exc)
            {

                Echo("Hard fail NpcExtender-GetDetectedEntityInfo");
                return new MyDetectedEntityInfo();

            }


        }

        Vector3D GetTrackedEntityPosition(long entityId)
        {

            try
            {

                Me.CustomData = entityId.ToString();
                return Me.GetValue<Vector3D>("NpcExtender-TrackEntity");

            }
            catch (Exception exc)
            {

                return new Vector3D(0, 0, 0);

            }

        }

        bool SendChatMessage(string message, string author, string audioClip = "")
        {

            if (message == lastChatSent)
            {

                return false;

            }

            lastChatSent = message;

            double broadcastDistance = 0;
            var antennaList = new List<IMyRadioAntenna>();
            GridTerminalSystem.GetBlocksOfType<IMyRadioAntenna>(antennaList);

            foreach (var antenna in antennaList)
            {

                if (antenna.IsFunctional == false || antenna.Enabled == false || antenna.EnableBroadcasting == false)
                {

                    continue;

                }

                var antennaRange = (double)antenna.Radius;

                if (antennaRange > broadcastDistance)
                {

                    broadcastDistance = antennaRange;

                }

            }

            if (broadcastDistance == 0)
            {

                return false;

            }

            try
            {

                string sendData = message + "\n" + author + "\n" + broadcastDistance.ToString() + "\n" + audioClip;
                Me.CustomData = sendData;
                return Me.GetValue<bool>("NpcExtender-ChatToPlayers");

            }
            catch (Exception exc)
            {

                return false;

            }

        }

        bool TargetIsBroadcasting(long entityId, bool checkAntennas = true, bool checkBeacons = true)
        {

            try
            {

                Me.CustomData = entityId.ToString() + "\n" + checkAntennas.ToString() + "\n" + checkBeacons.ToString();
                return Me.GetValue<bool>("NpcExtender-TargetIsBroadcasting");

            }
            catch (Exception exc)
            {

                return false;

            }

        }

        bool TargetPowered(long entityId)
        {

            try
            {

                Me.CustomData = entityId.ToString();
                return Me.GetValue<bool>("NpcExtender-TargetPowered");

            }
            catch (Exception exc)
            {

                return false;

            }

        }

        bool UpdateProgramBlockScript(string scriptName)
        {

            try
            {

                Me.CustomData = scriptName;
                return Me.GetValue<bool>("NpcExtender-UpdateProgramBlockScript");

            }
            catch (Exception exc)
            {

                return false;

            }

        }
List&lt;IMyTerminalBlock&gt; list = new List&lt;IMyTerminalBlock&gt;();
    
        List&lt;long&gt; GetAllEnemyGrids(string specificFaction = "None", double distanceToCheck = 15000)
        {

            try
            {

                Me.CustomData = specificFaction + "\n" + distanceToCheck.ToString();
                return Me.GetValue&lt;List&lt;long&gt;&gt;("NpcExtender-GetAllEnemies");

            }
            catch (Exception exc)
            {

                Echo("NpcExtender-GetAllEnemy Hard Fail");
                return new List&lt;long&gt;();

            }

        }
        Vector3D GetTrackedEntityPosition(long EntityId)
        {

            try
            {

                Me.CustomData = EntityId.ToString();
                return Me.GetValue&lt;Vector3D&gt;("NpcExtender-TrackEntity");

            }
            catch (Exception exc)
            {

                return new Vector3D(0, 0, 0);

            }
        }
        MyDetectedEntityInfo GetMDEI(long EntityId)
        {

            try
            {

                Me.CustomData = EntityId.ToString();
                return Me.GetValue&lt;MyDetectedEntityInfo&gt;("NpcExtender-GetDetectedEntityInfo");

            }
            catch (Exception exc)
            {

                Echo("Hard fail NpcExtender-GetDetectedEntityInfo");
                return new MyDetectedEntityInfo();

            }

        }
		public List&lt;Vector3D&gt; GenerateCircularPoints(Vector3D vec, int points, double radius)
        {
			vecList.Clear();
			Vector3D gravity = new Vector3D(0, 0, 0);
			Vector3D Gravity = new Vector3D(0, 0, 0);
            GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt;(list);
            var remote = list[0] as IMyRemoteControl;
            gravity = remote.GetNaturalGravity();
			Gravity = Vector3D.Normalize(gravity);
            
			double incrementAngle = (MathHelper.TwoPi / points);

            MatrixD rotationMatrix = MatrixD.CreateFromAxisAngle(Gravity, incrementAngle);

            Vector3D tangent = Vector3D.CalculatePerpendicularVector(Gravity) * radius;

            for (int i = 0; i &lt; points; i++)
            {
                tangent = Vector3D.TransformNormal(tangent, rotationMatrix);
                vecList.Add(tangent + vec);
            }
			//vecList.RemoveRange(0, 60);
            return vecList;
        }
bool receivedBroadcast = false;
bool success = false;
bool combatZero = false;
float tango = 0;
double tangoPOS = 1;
float ping = 15;
float signalTimer = 0;
long EntityId = 0;
List&lt;long&gt; targets = new List&lt;long&gt;();
readonly Random rnd = new Random();
readonly Random rndDistance = new Random();
readonly Random diceRoll = new Random();
Vector3D TargetV3D = new Vector3D(0, 0, 0);
Vector3D targetVector = new Vector3D(0, 0, 0);
List&lt;Vector3D&gt; vecList = new List&lt;Vector3D&gt;();
string OUT = "";
string TGT = "";
string KEY = "";
string Key = "";
string Protocol = "";
string KeyStore = "";
		
public void Main(string argument) 
	{ 
	string Ping = ping.ToString("G");
	ping++;
	Echo("Last Ping " + Ping);
	Echo("Protocol: " + Protocol);
	if (success)
		{
			Echo("Signal Established");
		}
	if (!success &amp;&amp; ping &gt; 17)
		{
			if (Key != "")
				{
					KeyStore = Key;
					Key = "";
					KEY = "";
					Storage = "";
				}
			else
				{
					string[] DATA = Storage.Split('*');
					if (DATA.Length &gt; 1)
						{
							Key = DATA[1];
							KeyStore = Key;
							Key = "";
							KEY = "";
							Storage = "";
						}
				}
		}

	if (argument.Contains("CKR2C") == true &amp;&amp; argument.Contains("*5503") == true)
		{
			string[] INFO = argument.Split('*');
			if (INFO.Length &gt; 1 &amp;&amp; signalTimer &lt;= 1)
				{
					Vector3D.TryParse(INFO[0], out TargetV3D);
					if (KEY == "" || KEY == INFO[1] || KeyStore == INFO[1])
						{
							Key = INFO[1];
							KEY = Key;
							TGT = TargetV3D.ToString();
							OUT = string.Join("*", TGT ?? "", KEY, KeyStore);
							Storage = OUT;
							receivedBroadcast = true;
							ping = 0;
							Protocol = "5503";
						}
				}
		}

	if (argument.Contains("CKR2C") == true &amp;&amp; argument.Contains("*5521") == true)
		{
			string[] INFO = argument.Split('*');
			if (INFO.Length &gt; 1 &amp;&amp; signalTimer &lt;= 1)
				{
					Vector3D.TryParse(INFO[0], out TargetV3D);
					if (KEY == "" || KEY == INFO[1] || KeyStore == INFO[1])
						{
							Key = INFO[1];
							KEY = Key;
							TGT = TargetV3D.ToString();
							OUT = string.Join("*", TGT ?? "", KEY, KeyStore);
							Storage = OUT;
							receivedBroadcast = true;
							ping = 0;
							Protocol = "5521";
						}
				}			
		}

	if (argument.Contains("CKR2C") == true &amp;&amp; argument.Contains("*2196") == true)
		{
			string[] INFO = argument.Split('*');
			if (INFO.Length &gt; 1)
				{
					if (KEY == INFO[1] || KeyStore == INFO[1])
						{
							OUT = string.Join("*", TGT ?? "", KEY, KeyStore);
							receivedBroadcast = true;
							ping = 0;
							Protocol = "ERROR";
							List&lt;IMyBatteryBlock&gt; Batteries = new List&lt;IMyBatteryBlock&gt;();
							List&lt;IMyReactor&gt; Reactors = new List&lt;IMyReactor&gt;();
							GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt;(Batteries);
							GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt;(Reactors);
								foreach (var item in Batteries)
									{
										int disableChance = diceRoll.Next(0, 6);
										if (disableChance &gt; 5)
											{
												IMyBatteryBlock Battery = (item as IMyBatteryBlock);
												Battery.ApplyAction("OnOff_Off");
											}
									}
								foreach (var item in Reactors)
									{
										int disableChance = diceRoll.Next(0, 6);
										if (disableChance &gt; 3)
											{
												IMyReactor Reactor = (item as IMyReactor);
												Reactor.ApplyAction("OnOff_Off");
											}
									}
						}
				}			
		}

	if (argument.Contains("CKR2C") == true &amp;&amp; argument.Contains("*2197") == true)
		{
			combatZero = true;
			receivedBroadcast = true;
			ping = 0;
			Protocol = "2197";
			List&lt;IMyBatteryBlock&gt; Batteries = new List&lt;IMyBatteryBlock&gt;();
			List&lt;IMyReactor&gt; Reactors = new List&lt;IMyReactor&gt;();
			GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt;(Batteries);
			GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt;(Reactors);
				foreach (var item in Batteries)
					{
						IMyBatteryBlock Battery = (item as IMyBatteryBlock);
						Battery.ApplyAction("OnOff_On");
					}
				foreach (var item in Reactors)
					{
						IMyReactor Reactor = (item as IMyReactor);
						Reactor.ApplyAction("OnOff_On");
					}
		}

	if (combatZero)
		{
			KEY = "";
			Key = "";
			KeyStore = "";
		}
		
		if (receivedBroadcast &amp;&amp; signalTimer &lt;= 0)
			{
				if (TGT != "")
					{
						GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt;(list);
						if (list.Count &gt; 0 &amp;&amp; tangoPOS &lt;= 0)
							{
								signalTimer = 10;
								tangoPOS = 0;
								receivedBroadcast = false;
								var remote = list[0] as IMyRemoteControl;
								GridTerminalSystem.GetBlocksOfType&lt;IMyUserControllableGun&gt;(list);     
								int behavior = diceRoll.Next(1, 6);
								success = true;
								var myPOS = Me.GetPosition();
								if (list.Count &gt; 0)     
									{
										if (Vector3D.DistanceSquared(TargetV3D, myPOS) &lt; 1000 * 1000)
											{
												if (behavior &gt; 4)
													{
														remote.ClearWaypoints();
														Vector3D targetPOS = new Vector3D(0, 0, 0);
														targetPOS = ((myPOS - myPOS + TargetV3D) / 1.5);
														remote.AddWaypoint(targetPOS, "Target");
														remote.ApplyAction("CollisionAvoidance_On");
														remote.SetAutoPilotEnabled(true);
														tangoPOS = 90;
													}
												else if (behavior &lt;= 4 &amp;&amp; behavior &gt; 2)     
													{
														remote.ClearWaypoints();
														Vector3D targetPOS = new Vector3D(0, 0, 0);
														targetPOS = (TargetV3D - myPOS * 1.12f);
														remote.AddWaypoint(targetPOS, "Target");
														remote.ApplyAction("CollisionAvoidance_On");
														remote.SetAutoPilotEnabled(true);
														tangoPOS = 90;
													}
												else
													{
														GenerateCircularPoints(TargetV3D, 8, 900);
														remote.ClearWaypoints();
														foreach (var point in vecList)
															{
																remote.AddWaypoint(point, "Encircle");
																tangoPOS = (tangoPOS + 60);
															}
														remote.ApplyAction("CollisionAvoidance_On");
														remote.SetAutoPilotEnabled(true);
													}
											}
										else
											{
												remote.ClearWaypoints();
												remote.AddWaypoint(TargetV3D, "Target");
												remote.ApplyAction("CollisionAvoidance_On");
												remote.SetAutoPilotEnabled(true);
												tangoPOS = 10;
											}
									}
								else
									{
										remote.ClearWaypoints();
										remote.AddWaypoint(TargetV3D - myPOS * 30f, "Target");
										remote.ApplyAction("CollisionAvoidance_On");
										remote.SetAutoPilotEnabled(true);
									}
							}
							
					}
			}
		else
			{
				signalTimer--;
				tangoPOS--;
			}
				
	//-------AUTONOMOUS LOGIC FOLLOWS--------//
			if (!receivedBroadcast &amp;&amp; ping &gt;= 15)
				{
				if (tango == 0)
					{
								GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt;(list);
								if (list.Count &gt; 0)
									{
										var remote = list[0] as IMyRemoteControl;
										targets = GetAllEnemyGrids();
										int statusCheck = diceRoll.Next(0, 6);
										if (statusCheck &lt;= 4)
											{
												if(targets.Count &gt; 0)
													{
														EntityId = targets[rnd.Next(0, targets.Count)];
														remote.ClearWaypoints();
														tango = (tango + 120);
													}
												else if(targets.Count == 0)
													{
														tango = (tango + 50);
														targetVector = Me.GetPosition();
														remote.ClearWaypoints();
														int distanceModifier = rndDistance.Next(-120, 120);
														remote.AddWaypoint(targetVector + distanceModifier, "Patrol");
														remote.ApplyAction("CollisionAvoidance_On");
														remote.SetAutoPilotEnabled(true);
													}
											}
									}
					}
				else
					{
						tango--;
						tangoPOS--;
						if (tangoPOS &lt;= 0)
							{
								GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt;(list);
								targetVector = GetTrackedEntityPosition(EntityId);
								var myPOS = Me.GetPosition();
								tangoPOS = 0;
								if (list.Count &gt; 0)
									{
										var remote = list[0] as IMyRemoteControl;
										GridTerminalSystem.GetBlocksOfType&lt;IMyUserControllableGun&gt;(list);     
										int behavior = diceRoll.Next(1, 6);
										if (list.Count &gt; 0)     
											{
												if (Vector3D.DistanceSquared(targetVector, myPOS) &lt; 1000 * 1000)
													{
														if (behavior &gt; 4)
															{
																remote.ClearWaypoints();
																Vector3D targetPOS = new Vector3D(0, 0, 0);
																targetPOS = ((myPOS - myPOS + targetVector) / 1.5);
																remote.AddWaypoint(targetPOS, "Target");
																remote.ApplyAction("CollisionAvoidance_On");
																remote.SetAutoPilotEnabled(true);
																tangoPOS = 90;
															}
														else if (behavior &lt;= 4 &amp;&amp; behavior &gt; 2)     
															{
																remote.ClearWaypoints();
																Vector3D targetPOS = new Vector3D(0, 0, 0);
																targetPOS = (targetVector - myPOS * 1.12f);
																remote.AddWaypoint(targetPOS, "Target");
																remote.ApplyAction("CollisionAvoidance_On");
																remote.SetAutoPilotEnabled(true);
																tangoPOS = 90;
															}
														else
															{
																GenerateCircularPoints(targetVector, 8, 900);
																remote.ClearWaypoints();
																foreach (var point in vecList)
																	{
																		remote.AddWaypoint(point, "Encircle");
																		tangoPOS = (tangoPOS + 60);
																	}
																remote.ApplyAction("CollisionAvoidance_On");
																remote.SetAutoPilotEnabled(true);
															}
													}
												else
													{
														remote.ClearWaypoints();
														remote.AddWaypoint(targetVector, "Target");
														remote.ApplyAction("CollisionAvoidance_On");
														remote.SetAutoPilotEnabled(true);
														tangoPOS = 10;
													}
											}
										else
											{
												remote.ClearWaypoints();
												remote.AddWaypoint(targetVector - myPOS * 30f, "Target");
												remote.ApplyAction("CollisionAvoidance_On");
												remote.SetAutoPilotEnabled(true);
											}
									}
							}
					}
				}
	}